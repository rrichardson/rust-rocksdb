/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __GNUC_VA_LIST: libc::c_uint = 1;
pub const __WORDSIZE: libc::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: libc::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: libc::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: libc::c_uint = 1;
pub const __DARWIN_UNIX03: libc::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: libc::c_uint = 1;
pub const __DARWIN_VERS_1050: libc::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: libc::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: libc::c_uint = 4096;
pub const __DARWIN_C_FULL: libc::c_uint = 900000;
pub const __DARWIN_C_LEVEL: libc::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: libc::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: libc::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: libc::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: libc::c_uint = 3;
pub const __PTHREAD_SIZE__: libc::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: libc::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: libc::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: libc::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: libc::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: libc::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: libc::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: libc::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: libc::c_uint = 16;
pub const INT8_MAX: libc::c_uint = 127;
pub const INT16_MAX: libc::c_uint = 32767;
pub const INT32_MAX: libc::c_uint = 2147483647;
pub const INT64_MAX: libc::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: libc::c_int = -128;
pub const INT16_MIN: libc::c_int = -32768;
pub const INT32_MIN: libc::c_int = -2147483648;
pub const INT64_MIN: libc::c_longlong = -9223372036854775808;
pub const UINT8_MAX: libc::c_uint = 255;
pub const UINT16_MAX: libc::c_uint = 65535;
pub const UINT32_MAX: libc::c_uint = 4294967295;
pub const UINT64_MAX: libc::c_int = -1;
pub const INT_LEAST8_MIN: libc::c_int = -128;
pub const INT_LEAST16_MIN: libc::c_int = -32768;
pub const INT_LEAST32_MIN: libc::c_int = -2147483648;
pub const INT_LEAST64_MIN: libc::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: libc::c_uint = 127;
pub const INT_LEAST16_MAX: libc::c_uint = 32767;
pub const INT_LEAST32_MAX: libc::c_uint = 2147483647;
pub const INT_LEAST64_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: libc::c_uint = 255;
pub const UINT_LEAST16_MAX: libc::c_uint = 65535;
pub const UINT_LEAST32_MAX: libc::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: libc::c_int = -1;
pub const INT_FAST8_MIN: libc::c_int = -128;
pub const INT_FAST16_MIN: libc::c_int = -32768;
pub const INT_FAST32_MIN: libc::c_int = -2147483648;
pub const INT_FAST64_MIN: libc::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: libc::c_uint = 127;
pub const INT_FAST16_MAX: libc::c_uint = 32767;
pub const INT_FAST32_MAX: libc::c_uint = 2147483647;
pub const INT_FAST64_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: libc::c_uint = 255;
pub const UINT_FAST16_MAX: libc::c_uint = 65535;
pub const UINT_FAST32_MAX: libc::c_uint = 4294967295;
pub const UINT_FAST64_MAX: libc::c_int = -1;
pub const INTPTR_MIN: libc::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: libc::c_int = -1;
pub const INTMAX_MIN: libc::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: libc::c_int = -1;
pub const PTRDIFF_MIN: libc::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: libc::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: libc::c_int = -1;
pub const RSIZE_MAX: libc::c_int = -1;
pub const WINT_MIN: libc::c_int = -2147483648;
pub const WINT_MAX: libc::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: libc::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: libc::c_uint = 2147483647;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wchar_t = libc::c_int;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_longlong;
pub type __uint64_t = libc::c_ulonglong;
pub type __darwin_intptr_t = libc::c_long;
pub type __darwin_natural_t = libc::c_uint;
pub type __darwin_ct_rune_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __mbstate8: __BindgenUnionField<[libc::c_char; 128usize]>,
    pub _mbstateL: __BindgenUnionField<libc::c_longlong>,
    pub bindgen_union_field: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = libc::c_long;
pub type __darwin_size_t = libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = libc::c_int;
pub type __darwin_clock_t = libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = libc::c_long;
pub type __darwin_time_t = libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = libc::c_uint;
pub type __darwin_fsfilcnt_t = libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [libc::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut libc::c_void)>,
    pub __arg: *mut libc::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ));
    assert_eq! (::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_pthread_handler_rec )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) .
                __routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! (
                __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next )
                ));
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_condattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutexattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque )
                ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: libc::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [libc::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize , concat
               ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __cleanup_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __opaque ) ));
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = libc::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = libc::c_long;
pub type uintmax_t = libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_backup_engine_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_backup_engine_info_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_restore_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_cache_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactionfilter_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactionfiltercontext_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactionfilterfactory_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_comparator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_env_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_fifo_compaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_filelock_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_filterpolicy_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_flushoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_iterator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_logger_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_mergeoperator_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_compactoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_block_based_table_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_cuckoo_table_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_randomfile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_readoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_seqfile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_slicetransform_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_snapshot_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writablefile_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writebatch_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writebatch_wi_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_writeoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_universal_compaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_livefiles_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_column_family_handle_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_envoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_ingestexternalfileoptions_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_sstfilewriter_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_ratelimiter_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_pinnableslice_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transactiondb_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transactiondb_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transaction_options_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_transaction_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rocksdb_checkpoint_t {
    _unused: [u8; 0],
}
extern "C" {
    pub fn rocksdb_open(options: *const rocksdb_options_t,
                        name: *const libc::c_char,
                        errptr: *mut *mut libc::c_char) -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_for_read_only(options: *const rocksdb_options_t,
                                      name: *const libc::c_char,
                                      error_if_log_file_exist: libc::c_uchar,
                                      errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_backup_engine_open(options: *const rocksdb_options_t,
                                      path: *const libc::c_char,
                                      errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_backup_engine_t;
}
extern "C" {
    pub fn rocksdb_backup_engine_create_new_backup(be:
                                                       *mut rocksdb_backup_engine_t,
                                                   db: *mut rocksdb_t,
                                                   errptr:
                                                       *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_backup_engine_purge_old_backups(be:
                                                       *mut rocksdb_backup_engine_t,
                                                   num_backups_to_keep: u32,
                                                   errptr:
                                                       *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_restore_options_create() -> *mut rocksdb_restore_options_t;
}
extern "C" {
    pub fn rocksdb_restore_options_destroy(opt:
                                               *mut rocksdb_restore_options_t);
}
extern "C" {
    pub fn rocksdb_restore_options_set_keep_log_files(opt:
                                                          *mut rocksdb_restore_options_t,
                                                      v: libc::c_int);
}
extern "C" {
    pub fn rocksdb_backup_engine_restore_db_from_latest_backup(be:
                                                                   *mut rocksdb_backup_engine_t,
                                                               db_dir:
                                                                   *const libc::c_char,
                                                               wal_dir:
                                                                   *const libc::c_char,
                                                               restore_options:
                                                                   *const rocksdb_restore_options_t,
                                                               errptr:
                                                                   *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_backup_engine_get_backup_info(be:
                                                     *mut rocksdb_backup_engine_t)
     -> *const rocksdb_backup_engine_info_t;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_count(info:
                                                *const rocksdb_backup_engine_info_t)
     -> libc::c_int;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_timestamp(info:
                                                    *const rocksdb_backup_engine_info_t,
                                                index: libc::c_int) -> i64;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_backup_id(info:
                                                    *const rocksdb_backup_engine_info_t,
                                                index: libc::c_int) -> u32;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_size(info:
                                               *const rocksdb_backup_engine_info_t,
                                           index: libc::c_int) -> u64;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_number_files(info:
                                                       *const rocksdb_backup_engine_info_t,
                                                   index: libc::c_int) -> u32;
}
extern "C" {
    pub fn rocksdb_backup_engine_info_destroy(info:
                                                  *const rocksdb_backup_engine_info_t);
}
extern "C" {
    pub fn rocksdb_backup_engine_close(be: *mut rocksdb_backup_engine_t);
}
extern "C" {
    pub fn rocksdb_checkpoint_object_create(db: *mut rocksdb_t,
                                            errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_checkpoint_t;
}
extern "C" {
    pub fn rocksdb_checkpoint_create(checkpoint: *mut rocksdb_checkpoint_t,
                                     checkpoint_dir: *const libc::c_char,
                                     log_size_for_flush: u64,
                                     errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_checkpoint_object_destroy(checkpoint:
                                                 *mut rocksdb_checkpoint_t);
}
extern "C" {
    pub fn rocksdb_open_column_families(options: *const rocksdb_options_t,
                                        name: *const libc::c_char,
                                        num_column_families: libc::c_int,
                                        column_family_names:
                                            *mut *const libc::c_char,
                                        column_family_options:
                                            *mut *const rocksdb_options_t,
                                        column_family_handles:
                                            *mut *mut rocksdb_column_family_handle_t,
                                        errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_open_for_read_only_column_families(options:
                                                          *const rocksdb_options_t,
                                                      name:
                                                          *const libc::c_char,
                                                      num_column_families:
                                                          libc::c_int,
                                                      column_family_names:
                                                          *mut *const libc::c_char,
                                                      column_family_options:
                                                          *mut *const rocksdb_options_t,
                                                      column_family_handles:
                                                          *mut *mut rocksdb_column_family_handle_t,
                                                      error_if_log_file_exist:
                                                          libc::c_uchar,
                                                      errptr:
                                                          *mut *mut libc::c_char)
     -> *mut rocksdb_t;
}
extern "C" {
    pub fn rocksdb_list_column_families(options: *const rocksdb_options_t,
                                        name: *const libc::c_char,
                                        lencf: *mut usize,
                                        errptr: *mut *mut libc::c_char)
     -> *mut *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_list_column_families_destroy(list: *mut *mut libc::c_char,
                                                len: usize);
}
extern "C" {
    pub fn rocksdb_create_column_family(db: *mut rocksdb_t,
                                        column_family_options:
                                            *const rocksdb_options_t,
                                        column_family_name:
                                            *const libc::c_char,
                                        errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_column_family_handle_t;
}
extern "C" {
    pub fn rocksdb_drop_column_family(db: *mut rocksdb_t,
                                      handle:
                                          *mut rocksdb_column_family_handle_t,
                                      errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_column_family_handle_destroy(arg1:
                                                    *mut rocksdb_column_family_handle_t);
}
extern "C" {
    pub fn rocksdb_close(db: *mut rocksdb_t);
}
extern "C" {
    pub fn rocksdb_put(db: *mut rocksdb_t,
                       options: *const rocksdb_writeoptions_t,
                       key: *const libc::c_char, keylen: usize,
                       val: *const libc::c_char, vallen: usize,
                       errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_put_cf(db: *mut rocksdb_t,
                          options: *const rocksdb_writeoptions_t,
                          column_family: *mut rocksdb_column_family_handle_t,
                          key: *const libc::c_char, keylen: usize,
                          val: *const libc::c_char, vallen: usize,
                          errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_delete(db: *mut rocksdb_t,
                          options: *const rocksdb_writeoptions_t,
                          key: *const libc::c_char, keylen: usize,
                          errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_delete_cf(db: *mut rocksdb_t,
                             options: *const rocksdb_writeoptions_t,
                             column_family:
                                 *mut rocksdb_column_family_handle_t,
                             key: *const libc::c_char, keylen: usize,
                             errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_merge(db: *mut rocksdb_t,
                         options: *const rocksdb_writeoptions_t,
                         key: *const libc::c_char, keylen: usize,
                         val: *const libc::c_char, vallen: usize,
                         errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_merge_cf(db: *mut rocksdb_t,
                            options: *const rocksdb_writeoptions_t,
                            column_family:
                                *mut rocksdb_column_family_handle_t,
                            key: *const libc::c_char, keylen: usize,
                            val: *const libc::c_char, vallen: usize,
                            errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_write(db: *mut rocksdb_t,
                         options: *const rocksdb_writeoptions_t,
                         batch: *mut rocksdb_writebatch_t,
                         errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_get(db: *mut rocksdb_t,
                       options: *const rocksdb_readoptions_t,
                       key: *const libc::c_char, keylen: usize,
                       vallen: *mut usize, errptr: *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_get_cf(db: *mut rocksdb_t,
                          options: *const rocksdb_readoptions_t,
                          column_family: *mut rocksdb_column_family_handle_t,
                          key: *const libc::c_char, keylen: usize,
                          vallen: *mut usize, errptr: *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_multi_get(db: *mut rocksdb_t,
                             options: *const rocksdb_readoptions_t,
                             num_keys: usize,
                             keys_list: *const *const libc::c_char,
                             keys_list_sizes: *const usize,
                             values_list: *mut *mut libc::c_char,
                             values_list_sizes: *mut usize,
                             errs: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_multi_get_cf(db: *mut rocksdb_t,
                                options: *const rocksdb_readoptions_t,
                                column_families:
                                    *const *const rocksdb_column_family_handle_t,
                                num_keys: usize,
                                keys_list: *const *const libc::c_char,
                                keys_list_sizes: *const usize,
                                values_list: *mut *mut libc::c_char,
                                values_list_sizes: *mut usize,
                                errs: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_create_iterator(db: *mut rocksdb_t,
                                   options: *const rocksdb_readoptions_t)
     -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_create_iterator_cf(db: *mut rocksdb_t,
                                      options: *const rocksdb_readoptions_t,
                                      column_family:
                                          *mut rocksdb_column_family_handle_t)
     -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_create_iterators(db: *mut rocksdb_t,
                                    opts: *mut rocksdb_readoptions_t,
                                    column_families:
                                        *mut *mut rocksdb_column_family_handle_t,
                                    iterators: *mut *mut rocksdb_iterator_t,
                                    size: usize,
                                    errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_create_snapshot(db: *mut rocksdb_t)
     -> *const rocksdb_snapshot_t;
}
extern "C" {
    pub fn rocksdb_release_snapshot(db: *mut rocksdb_t,
                                    snapshot: *const rocksdb_snapshot_t);
}
extern "C" {
    pub fn rocksdb_property_value(db: *mut rocksdb_t,
                                  propname: *const libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_property_int(db: *mut rocksdb_t,
                                propname: *const libc::c_char,
                                out_val: *mut u64) -> libc::c_int;
}
extern "C" {
    pub fn rocksdb_property_value_cf(db: *mut rocksdb_t,
                                     column_family:
                                         *mut rocksdb_column_family_handle_t,
                                     propname: *const libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_approximate_sizes(db: *mut rocksdb_t,
                                     num_ranges: libc::c_int,
                                     range_start_key:
                                         *const *const libc::c_char,
                                     range_start_key_len: *const usize,
                                     range_limit_key:
                                         *const *const libc::c_char,
                                     range_limit_key_len: *const usize,
                                     sizes: *mut u64);
}
extern "C" {
    pub fn rocksdb_approximate_sizes_cf(db: *mut rocksdb_t,
                                        column_family:
                                            *mut rocksdb_column_family_handle_t,
                                        num_ranges: libc::c_int,
                                        range_start_key:
                                            *const *const libc::c_char,
                                        range_start_key_len: *const usize,
                                        range_limit_key:
                                            *const *const libc::c_char,
                                        range_limit_key_len: *const usize,
                                        sizes: *mut u64);
}
extern "C" {
    pub fn rocksdb_compact_range(db: *mut rocksdb_t,
                                 start_key: *const libc::c_char,
                                 start_key_len: usize,
                                 limit_key: *const libc::c_char,
                                 limit_key_len: usize);
}
extern "C" {
    pub fn rocksdb_compact_range_cf(db: *mut rocksdb_t,
                                    column_family:
                                        *mut rocksdb_column_family_handle_t,
                                    start_key: *const libc::c_char,
                                    start_key_len: usize,
                                    limit_key: *const libc::c_char,
                                    limit_key_len: usize);
}
extern "C" {
    pub fn rocksdb_compact_range_opt(db: *mut rocksdb_t,
                                     opt: *mut rocksdb_compactoptions_t,
                                     start_key: *const libc::c_char,
                                     start_key_len: usize,
                                     limit_key: *const libc::c_char,
                                     limit_key_len: usize);
}
extern "C" {
    pub fn rocksdb_compact_range_cf_opt(db: *mut rocksdb_t,
                                        column_family:
                                            *mut rocksdb_column_family_handle_t,
                                        opt: *mut rocksdb_compactoptions_t,
                                        start_key: *const libc::c_char,
                                        start_key_len: usize,
                                        limit_key: *const libc::c_char,
                                        limit_key_len: usize);
}
extern "C" {
    pub fn rocksdb_delete_file(db: *mut rocksdb_t, name: *const libc::c_char);
}
extern "C" {
    pub fn rocksdb_livefiles(db: *mut rocksdb_t)
     -> *const rocksdb_livefiles_t;
}
extern "C" {
    pub fn rocksdb_flush(db: *mut rocksdb_t,
                         options: *const rocksdb_flushoptions_t,
                         errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_disable_file_deletions(db: *mut rocksdb_t,
                                          errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_enable_file_deletions(db: *mut rocksdb_t,
                                         force: libc::c_uchar,
                                         errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_destroy_db(options: *const rocksdb_options_t,
                              name: *const libc::c_char,
                              errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_repair_db(options: *const rocksdb_options_t,
                             name: *const libc::c_char,
                             errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_iter_destroy(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_valid(arg1: *const rocksdb_iterator_t)
     -> libc::c_uchar;
}
extern "C" {
    pub fn rocksdb_iter_seek_to_first(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_seek_to_last(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_seek(arg1: *mut rocksdb_iterator_t,
                             k: *const libc::c_char, klen: usize);
}
extern "C" {
    pub fn rocksdb_iter_seek_for_prev(arg1: *mut rocksdb_iterator_t,
                                      k: *const libc::c_char, klen: usize);
}
extern "C" {
    pub fn rocksdb_iter_next(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_prev(arg1: *mut rocksdb_iterator_t);
}
extern "C" {
    pub fn rocksdb_iter_key(arg1: *const rocksdb_iterator_t, klen: *mut usize)
     -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_iter_value(arg1: *const rocksdb_iterator_t,
                              vlen: *mut usize) -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_iter_get_error(arg1: *const rocksdb_iterator_t,
                                  errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_writebatch_create() -> *mut rocksdb_writebatch_t;
}
extern "C" {
    pub fn rocksdb_writebatch_create_from(rep: *const libc::c_char,
                                          size: usize)
     -> *mut rocksdb_writebatch_t;
}
extern "C" {
    pub fn rocksdb_writebatch_destroy(arg1: *mut rocksdb_writebatch_t);
}
extern "C" {
    pub fn rocksdb_writebatch_clear(arg1: *mut rocksdb_writebatch_t);
}
extern "C" {
    pub fn rocksdb_writebatch_count(arg1: *mut rocksdb_writebatch_t)
     -> libc::c_int;
}
extern "C" {
    pub fn rocksdb_writebatch_put(arg1: *mut rocksdb_writebatch_t,
                                  key: *const libc::c_char, klen: usize,
                                  val: *const libc::c_char, vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_put_cf(arg1: *mut rocksdb_writebatch_t,
                                     column_family:
                                         *mut rocksdb_column_family_handle_t,
                                     key: *const libc::c_char, klen: usize,
                                     val: *const libc::c_char, vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_putv(b: *mut rocksdb_writebatch_t,
                                   num_keys: libc::c_int,
                                   keys_list: *const *const libc::c_char,
                                   keys_list_sizes: *const usize,
                                   num_values: libc::c_int,
                                   values_list: *const *const libc::c_char,
                                   values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_putv_cf(b: *mut rocksdb_writebatch_t,
                                      column_family:
                                          *mut rocksdb_column_family_handle_t,
                                      num_keys: libc::c_int,
                                      keys_list: *const *const libc::c_char,
                                      keys_list_sizes: *const usize,
                                      num_values: libc::c_int,
                                      values_list: *const *const libc::c_char,
                                      values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_merge(arg1: *mut rocksdb_writebatch_t,
                                    key: *const libc::c_char, klen: usize,
                                    val: *const libc::c_char, vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_merge_cf(arg1: *mut rocksdb_writebatch_t,
                                       column_family:
                                           *mut rocksdb_column_family_handle_t,
                                       key: *const libc::c_char, klen: usize,
                                       val: *const libc::c_char, vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_mergev(b: *mut rocksdb_writebatch_t,
                                     num_keys: libc::c_int,
                                     keys_list: *const *const libc::c_char,
                                     keys_list_sizes: *const usize,
                                     num_values: libc::c_int,
                                     values_list: *const *const libc::c_char,
                                     values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_mergev_cf(b: *mut rocksdb_writebatch_t,
                                        column_family:
                                            *mut rocksdb_column_family_handle_t,
                                        num_keys: libc::c_int,
                                        keys_list: *const *const libc::c_char,
                                        keys_list_sizes: *const usize,
                                        num_values: libc::c_int,
                                        values_list:
                                            *const *const libc::c_char,
                                        values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_delete(arg1: *mut rocksdb_writebatch_t,
                                     key: *const libc::c_char, klen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_delete_cf(arg1: *mut rocksdb_writebatch_t,
                                        column_family:
                                            *mut rocksdb_column_family_handle_t,
                                        key: *const libc::c_char,
                                        klen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_deletev(b: *mut rocksdb_writebatch_t,
                                      num_keys: libc::c_int,
                                      keys_list: *const *const libc::c_char,
                                      keys_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_deletev_cf(b: *mut rocksdb_writebatch_t,
                                         column_family:
                                             *mut rocksdb_column_family_handle_t,
                                         num_keys: libc::c_int,
                                         keys_list:
                                             *const *const libc::c_char,
                                         keys_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_delete_range(b: *mut rocksdb_writebatch_t,
                                           start_key: *const libc::c_char,
                                           start_key_len: usize,
                                           end_key: *const libc::c_char,
                                           end_key_len: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_delete_range_cf(b: *mut rocksdb_writebatch_t,
                                              column_family:
                                                  *mut rocksdb_column_family_handle_t,
                                              start_key: *const libc::c_char,
                                              start_key_len: usize,
                                              end_key: *const libc::c_char,
                                              end_key_len: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_delete_rangev(b: *mut rocksdb_writebatch_t,
                                            num_keys: libc::c_int,
                                            start_keys_list:
                                                *const *const libc::c_char,
                                            start_keys_list_sizes:
                                                *const usize,
                                            end_keys_list:
                                                *const *const libc::c_char,
                                            end_keys_list_sizes:
                                                *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_delete_rangev_cf(b: *mut rocksdb_writebatch_t,
                                               column_family:
                                                   *mut rocksdb_column_family_handle_t,
                                               num_keys: libc::c_int,
                                               start_keys_list:
                                                   *const *const libc::c_char,
                                               start_keys_list_sizes:
                                                   *const usize,
                                               end_keys_list:
                                                   *const *const libc::c_char,
                                               end_keys_list_sizes:
                                                   *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_put_log_data(arg1: *mut rocksdb_writebatch_t,
                                           blob: *const libc::c_char,
                                           len: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_iterate(arg1: *mut rocksdb_writebatch_t,
                                      state: *mut libc::c_void,
                                      put:
                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         *mut libc::c_void,
                                                                                     k:
                                                                                         *const libc::c_char,
                                                                                     klen:
                                                                                         usize,
                                                                                     v:
                                                                                         *const libc::c_char,
                                                                                     vlen:
                                                                                         usize)>,
                                      deleted:
                                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         *mut libc::c_void,
                                                                                     k:
                                                                                         *const libc::c_char,
                                                                                     klen:
                                                                                         usize)>);
}
extern "C" {
    pub fn rocksdb_writebatch_data(arg1: *mut rocksdb_writebatch_t,
                                   size: *mut usize) -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_set_save_point(arg1: *mut rocksdb_writebatch_t);
}
extern "C" {
    pub fn rocksdb_writebatch_rollback_to_save_point(arg1:
                                                         *mut rocksdb_writebatch_t,
                                                     errptr:
                                                         *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_writebatch_pop_save_point(arg1: *mut rocksdb_writebatch_t,
                                             errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create(reserved_bytes: usize,
                                        overwrite_keys: libc::c_uchar)
     -> *mut rocksdb_writebatch_wi_t;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create_from(rep: *const libc::c_char,
                                             size: usize)
     -> *mut rocksdb_writebatch_wi_t;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_destroy(arg1: *mut rocksdb_writebatch_wi_t);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_clear(arg1: *mut rocksdb_writebatch_wi_t);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_count(b: *mut rocksdb_writebatch_wi_t)
     -> libc::c_int;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_put(arg1: *mut rocksdb_writebatch_wi_t,
                                     key: *const libc::c_char, klen: usize,
                                     val: *const libc::c_char, vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_put_cf(arg1: *mut rocksdb_writebatch_wi_t,
                                        column_family:
                                            *mut rocksdb_column_family_handle_t,
                                        key: *const libc::c_char, klen: usize,
                                        val: *const libc::c_char,
                                        vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_putv(b: *mut rocksdb_writebatch_wi_t,
                                      num_keys: libc::c_int,
                                      keys_list: *const *const libc::c_char,
                                      keys_list_sizes: *const usize,
                                      num_values: libc::c_int,
                                      values_list: *const *const libc::c_char,
                                      values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_putv_cf(b: *mut rocksdb_writebatch_wi_t,
                                         column_family:
                                             *mut rocksdb_column_family_handle_t,
                                         num_keys: libc::c_int,
                                         keys_list:
                                             *const *const libc::c_char,
                                         keys_list_sizes: *const usize,
                                         num_values: libc::c_int,
                                         values_list:
                                             *const *const libc::c_char,
                                         values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_merge(arg1: *mut rocksdb_writebatch_wi_t,
                                       key: *const libc::c_char, klen: usize,
                                       val: *const libc::c_char, vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_merge_cf(arg1: *mut rocksdb_writebatch_wi_t,
                                          column_family:
                                              *mut rocksdb_column_family_handle_t,
                                          key: *const libc::c_char,
                                          klen: usize,
                                          val: *const libc::c_char,
                                          vlen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_mergev(b: *mut rocksdb_writebatch_wi_t,
                                        num_keys: libc::c_int,
                                        keys_list: *const *const libc::c_char,
                                        keys_list_sizes: *const usize,
                                        num_values: libc::c_int,
                                        values_list:
                                            *const *const libc::c_char,
                                        values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_mergev_cf(b: *mut rocksdb_writebatch_wi_t,
                                           column_family:
                                               *mut rocksdb_column_family_handle_t,
                                           num_keys: libc::c_int,
                                           keys_list:
                                               *const *const libc::c_char,
                                           keys_list_sizes: *const usize,
                                           num_values: libc::c_int,
                                           values_list:
                                               *const *const libc::c_char,
                                           values_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete(arg1: *mut rocksdb_writebatch_wi_t,
                                        key: *const libc::c_char,
                                        klen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_cf(arg1: *mut rocksdb_writebatch_wi_t,
                                           column_family:
                                               *mut rocksdb_column_family_handle_t,
                                           key: *const libc::c_char,
                                           klen: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_deletev(b: *mut rocksdb_writebatch_wi_t,
                                         num_keys: libc::c_int,
                                         keys_list:
                                             *const *const libc::c_char,
                                         keys_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_deletev_cf(b: *mut rocksdb_writebatch_wi_t,
                                            column_family:
                                                *mut rocksdb_column_family_handle_t,
                                            num_keys: libc::c_int,
                                            keys_list:
                                                *const *const libc::c_char,
                                            keys_list_sizes: *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_range(b: *mut rocksdb_writebatch_wi_t,
                                              start_key: *const libc::c_char,
                                              start_key_len: usize,
                                              end_key: *const libc::c_char,
                                              end_key_len: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_range_cf(b:
                                                     *mut rocksdb_writebatch_wi_t,
                                                 column_family:
                                                     *mut rocksdb_column_family_handle_t,
                                                 start_key:
                                                     *const libc::c_char,
                                                 start_key_len: usize,
                                                 end_key: *const libc::c_char,
                                                 end_key_len: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_rangev(b:
                                                   *mut rocksdb_writebatch_wi_t,
                                               num_keys: libc::c_int,
                                               start_keys_list:
                                                   *const *const libc::c_char,
                                               start_keys_list_sizes:
                                                   *const usize,
                                               end_keys_list:
                                                   *const *const libc::c_char,
                                               end_keys_list_sizes:
                                                   *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_delete_rangev_cf(b:
                                                      *mut rocksdb_writebatch_wi_t,
                                                  column_family:
                                                      *mut rocksdb_column_family_handle_t,
                                                  num_keys: libc::c_int,
                                                  start_keys_list:
                                                      *const *const libc::c_char,
                                                  start_keys_list_sizes:
                                                      *const usize,
                                                  end_keys_list:
                                                      *const *const libc::c_char,
                                                  end_keys_list_sizes:
                                                      *const usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_put_log_data(arg1:
                                                  *mut rocksdb_writebatch_wi_t,
                                              blob: *const libc::c_char,
                                              len: usize);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_iterate(b: *mut rocksdb_writebatch_wi_t,
                                         state: *mut libc::c_void,
                                         put:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void,
                                                                                        k:
                                                                                            *const libc::c_char,
                                                                                        klen:
                                                                                            usize,
                                                                                        v:
                                                                                            *const libc::c_char,
                                                                                        vlen:
                                                                                            usize)>,
                                         deleted:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void,
                                                                                        k:
                                                                                            *const libc::c_char,
                                                                                        klen:
                                                                                            usize)>);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_data(b: *mut rocksdb_writebatch_wi_t,
                                      size: *mut usize)
     -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_set_save_point(arg1:
                                                    *mut rocksdb_writebatch_wi_t);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_rollback_to_save_point(arg1:
                                                            *mut rocksdb_writebatch_wi_t,
                                                        errptr:
                                                            *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch(wbwi:
                                                    *mut rocksdb_writebatch_wi_t,
                                                options:
                                                    *const rocksdb_options_t,
                                                key: *const libc::c_char,
                                                keylen: usize,
                                                vallen: *mut usize,
                                                errptr:
                                                    *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch_cf(wbwi:
                                                       *mut rocksdb_writebatch_wi_t,
                                                   options:
                                                       *const rocksdb_options_t,
                                                   column_family:
                                                       *mut rocksdb_column_family_handle_t,
                                                   key: *const libc::c_char,
                                                   keylen: usize,
                                                   vallen: *mut usize,
                                                   errptr:
                                                       *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch_and_db(wbwi:
                                                           *mut rocksdb_writebatch_wi_t,
                                                       db: *mut rocksdb_t,
                                                       options:
                                                           *const rocksdb_readoptions_t,
                                                       key:
                                                           *const libc::c_char,
                                                       keylen: usize,
                                                       vallen: *mut usize,
                                                       errptr:
                                                           *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_get_from_batch_and_db_cf(wbwi:
                                                              *mut rocksdb_writebatch_wi_t,
                                                          db: *mut rocksdb_t,
                                                          options:
                                                              *const rocksdb_readoptions_t,
                                                          column_family:
                                                              *mut rocksdb_column_family_handle_t,
                                                          key:
                                                              *const libc::c_char,
                                                          keylen: usize,
                                                          vallen: *mut usize,
                                                          errptr:
                                                              *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_write_writebatch_wi(db: *mut rocksdb_t,
                                       options: *const rocksdb_writeoptions_t,
                                       wbwi: *mut rocksdb_writebatch_wi_t,
                                       errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create_iterator_with_base(wbwi:
                                                               *mut rocksdb_writebatch_wi_t,
                                                           base_iterator:
                                                               *mut rocksdb_iterator_t)
     -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_writebatch_wi_create_iterator_with_base_cf(wbwi:
                                                                  *mut rocksdb_writebatch_wi_t,
                                                              base_iterator:
                                                                  *mut rocksdb_iterator_t,
                                                              cf:
                                                                  *mut rocksdb_column_family_handle_t)
     -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_block_based_options_create()
     -> *mut rocksdb_block_based_table_options_t;
}
extern "C" {
    pub fn rocksdb_block_based_options_destroy(options:
                                                   *mut rocksdb_block_based_table_options_t);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_size(options:
                                                          *mut rocksdb_block_based_table_options_t,
                                                      block_size: usize);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_size_deviation(options:
                                                                    *mut rocksdb_block_based_table_options_t,
                                                                block_size_deviation:
                                                                    libc::c_int);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_restart_interval(options:
                                                                      *mut rocksdb_block_based_table_options_t,
                                                                  block_restart_interval:
                                                                      libc::c_int);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_filter_policy(options:
                                                             *mut rocksdb_block_based_table_options_t,
                                                         filter_policy:
                                                             *mut rocksdb_filterpolicy_t);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_no_block_cache(options:
                                                              *mut rocksdb_block_based_table_options_t,
                                                          no_block_cache:
                                                              libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_cache(options:
                                                           *mut rocksdb_block_based_table_options_t,
                                                       block_cache:
                                                           *mut rocksdb_cache_t);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_block_cache_compressed(options:
                                                                      *mut rocksdb_block_based_table_options_t,
                                                                  block_cache_compressed:
                                                                      *mut rocksdb_cache_t);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_whole_key_filtering(arg1:
                                                                   *mut rocksdb_block_based_table_options_t,
                                                               arg2:
                                                                   libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_format_version(arg1:
                                                              *mut rocksdb_block_based_table_options_t,
                                                          arg2: libc::c_int);
}
pub const rocksdb_block_based_table_index_type_binary_search: _bindgen_ty_1 =
    _bindgen_ty_1::rocksdb_block_based_table_index_type_binary_search;
pub const rocksdb_block_based_table_index_type_hash_search: _bindgen_ty_1 =
    _bindgen_ty_1::rocksdb_block_based_table_index_type_hash_search;
pub const rocksdb_block_based_table_index_type_two_level_index_search:
          _bindgen_ty_1 =
    _bindgen_ty_1::rocksdb_block_based_table_index_type_two_level_index_search;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    rocksdb_block_based_table_index_type_binary_search = 0,
    rocksdb_block_based_table_index_type_hash_search = 1,
    rocksdb_block_based_table_index_type_two_level_index_search = 2,
}
extern "C" {
    pub fn rocksdb_block_based_options_set_index_type(arg1:
                                                          *mut rocksdb_block_based_table_options_t,
                                                      arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_hash_index_allow_collision(arg1:
                                                                          *mut rocksdb_block_based_table_options_t,
                                                                      arg2:
                                                                          libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_cache_index_and_filter_blocks(arg1:
                                                                             *mut rocksdb_block_based_table_options_t,
                                                                         arg2:
                                                                             libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_block_based_options_set_pin_l0_filter_and_index_blocks_in_cache(arg1:
                                                                                       *mut rocksdb_block_based_table_options_t,
                                                                                   arg2:
                                                                                       libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_block_based_table_factory(opt:
                                                             *mut rocksdb_options_t,
                                                         table_options:
                                                             *mut rocksdb_block_based_table_options_t);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_create()
     -> *mut rocksdb_cuckoo_table_options_t;
}
extern "C" {
    pub fn rocksdb_cuckoo_options_destroy(options:
                                              *mut rocksdb_cuckoo_table_options_t);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_hash_ratio(options:
                                                     *mut rocksdb_cuckoo_table_options_t,
                                                 v: f64);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_max_search_depth(options:
                                                           *mut rocksdb_cuckoo_table_options_t,
                                                       v: u32);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_cuckoo_block_size(options:
                                                            *mut rocksdb_cuckoo_table_options_t,
                                                        v: u32);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_identity_as_first_hash(options:
                                                                 *mut rocksdb_cuckoo_table_options_t,
                                                             v:
                                                                 libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_cuckoo_options_set_use_module_hash(options:
                                                          *mut rocksdb_cuckoo_table_options_t,
                                                      v: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_cuckoo_table_factory(opt:
                                                        *mut rocksdb_options_t,
                                                    table_options:
                                                        *mut rocksdb_cuckoo_table_options_t);
}
extern "C" {
    pub fn rocksdb_set_options(db: *mut rocksdb_t, count: libc::c_int,
                               keys: *const *const libc::c_char,
                               values: *const *const libc::c_char,
                               errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_options_create() -> *mut rocksdb_options_t;
}
extern "C" {
    pub fn rocksdb_options_destroy(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_increase_parallelism(opt: *mut rocksdb_options_t,
                                                total_threads: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_optimize_for_point_lookup(opt:
                                                         *mut rocksdb_options_t,
                                                     block_cache_size_mb:
                                                         u64);
}
extern "C" {
    pub fn rocksdb_options_optimize_level_style_compaction(opt:
                                                               *mut rocksdb_options_t,
                                                           memtable_memory_budget:
                                                               u64);
}
extern "C" {
    pub fn rocksdb_options_optimize_universal_style_compaction(opt:
                                                                   *mut rocksdb_options_t,
                                                               memtable_memory_budget:
                                                                   u64);
}
extern "C" {
    pub fn rocksdb_options_set_compaction_filter(arg1: *mut rocksdb_options_t,
                                                 arg2:
                                                     *mut rocksdb_compactionfilter_t);
}
extern "C" {
    pub fn rocksdb_options_set_compaction_filter_factory(arg1:
                                                             *mut rocksdb_options_t,
                                                         arg2:
                                                             *mut rocksdb_compactionfilterfactory_t);
}
extern "C" {
    pub fn rocksdb_options_compaction_readahead_size(arg1:
                                                         *mut rocksdb_options_t,
                                                     arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_comparator(arg1: *mut rocksdb_options_t,
                                          arg2: *mut rocksdb_comparator_t);
}
extern "C" {
    pub fn rocksdb_options_set_merge_operator(arg1: *mut rocksdb_options_t,
                                              arg2:
                                                  *mut rocksdb_mergeoperator_t);
}
extern "C" {
    pub fn rocksdb_options_set_uint64add_merge_operator(arg1:
                                                            *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_compression_per_level(opt:
                                                         *mut rocksdb_options_t,
                                                     level_values:
                                                         *mut libc::c_int,
                                                     num_levels: usize);
}
extern "C" {
    pub fn rocksdb_options_set_create_if_missing(arg1: *mut rocksdb_options_t,
                                                 arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_create_missing_column_families(arg1:
                                                                  *mut rocksdb_options_t,
                                                              arg2:
                                                                  libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_error_if_exists(arg1: *mut rocksdb_options_t,
                                               arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_paranoid_checks(arg1: *mut rocksdb_options_t,
                                               arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_env(arg1: *mut rocksdb_options_t,
                                   arg2: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_options_set_info_log(arg1: *mut rocksdb_options_t,
                                        arg2: *mut rocksdb_logger_t);
}
extern "C" {
    pub fn rocksdb_options_set_info_log_level(arg1: *mut rocksdb_options_t,
                                              arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_write_buffer_size(arg1: *mut rocksdb_options_t,
                                                 arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_db_write_buffer_size(arg1:
                                                        *mut rocksdb_options_t,
                                                    arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_max_open_files(arg1: *mut rocksdb_options_t,
                                              arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_file_opening_threads(arg1:
                                                            *mut rocksdb_options_t,
                                                        arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_total_wal_size(opt: *mut rocksdb_options_t,
                                                  n: u64);
}
extern "C" {
    pub fn rocksdb_options_set_compression_options(arg1:
                                                       *mut rocksdb_options_t,
                                                   arg2: libc::c_int,
                                                   arg3: libc::c_int,
                                                   arg4: libc::c_int,
                                                   arg5: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_prefix_extractor(arg1: *mut rocksdb_options_t,
                                                arg2:
                                                    *mut rocksdb_slicetransform_t);
}
extern "C" {
    pub fn rocksdb_options_set_num_levels(arg1: *mut rocksdb_options_t,
                                          arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_level0_file_num_compaction_trigger(arg1:
                                                                      *mut rocksdb_options_t,
                                                                  arg2:
                                                                      libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_level0_slowdown_writes_trigger(arg1:
                                                                  *mut rocksdb_options_t,
                                                              arg2:
                                                                  libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_level0_stop_writes_trigger(arg1:
                                                              *mut rocksdb_options_t,
                                                          arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_mem_compaction_level(arg1:
                                                            *mut rocksdb_options_t,
                                                        arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_target_file_size_base(arg1:
                                                         *mut rocksdb_options_t,
                                                     arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_target_file_size_multiplier(arg1:
                                                               *mut rocksdb_options_t,
                                                           arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_bytes_for_level_base(arg1:
                                                            *mut rocksdb_options_t,
                                                        arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_level_compaction_dynamic_level_bytes(arg1:
                                                                        *mut rocksdb_options_t,
                                                                    arg2:
                                                                        libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_max_bytes_for_level_multiplier(arg1:
                                                                  *mut rocksdb_options_t,
                                                              arg2: f64);
}
extern "C" {
    pub fn rocksdb_options_set_max_bytes_for_level_multiplier_additional(arg1:
                                                                             *mut rocksdb_options_t,
                                                                         level_values:
                                                                             *mut libc::c_int,
                                                                         num_levels:
                                                                             usize);
}
extern "C" {
    pub fn rocksdb_options_enable_statistics(arg1: *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_statistics_get_string(opt: *mut rocksdb_options_t)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_options_set_max_write_buffer_number(arg1:
                                                           *mut rocksdb_options_t,
                                                       arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_min_write_buffer_number_to_merge(arg1:
                                                                    *mut rocksdb_options_t,
                                                                arg2:
                                                                    libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_write_buffer_number_to_maintain(arg1:
                                                                       *mut rocksdb_options_t,
                                                                   arg2:
                                                                       libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_background_compactions(arg1:
                                                              *mut rocksdb_options_t,
                                                          arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_base_background_compactions(arg1:
                                                               *mut rocksdb_options_t,
                                                           arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_background_flushes(arg1:
                                                          *mut rocksdb_options_t,
                                                      arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_max_log_file_size(arg1: *mut rocksdb_options_t,
                                                 arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_log_file_time_to_roll(arg1:
                                                         *mut rocksdb_options_t,
                                                     arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_keep_log_file_num(arg1: *mut rocksdb_options_t,
                                                 arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_recycle_log_file_num(arg1:
                                                        *mut rocksdb_options_t,
                                                    arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_soft_rate_limit(arg1: *mut rocksdb_options_t,
                                               arg2: f64);
}
extern "C" {
    pub fn rocksdb_options_set_hard_rate_limit(arg1: *mut rocksdb_options_t,
                                               arg2: f64);
}
extern "C" {
    pub fn rocksdb_options_set_soft_pending_compaction_bytes_limit(opt:
                                                                       *mut rocksdb_options_t,
                                                                   v: usize);
}
extern "C" {
    pub fn rocksdb_options_set_hard_pending_compaction_bytes_limit(opt:
                                                                       *mut rocksdb_options_t,
                                                                   v: usize);
}
extern "C" {
    pub fn rocksdb_options_set_rate_limit_delay_max_milliseconds(arg1:
                                                                     *mut rocksdb_options_t,
                                                                 arg2:
                                                                     libc::c_uint);
}
extern "C" {
    pub fn rocksdb_options_set_max_manifest_file_size(arg1:
                                                          *mut rocksdb_options_t,
                                                      arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_table_cache_numshardbits(arg1:
                                                            *mut rocksdb_options_t,
                                                        arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_table_cache_remove_scan_count_limit(arg1:
                                                                       *mut rocksdb_options_t,
                                                                   arg2:
                                                                       libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_arena_block_size(arg1: *mut rocksdb_options_t,
                                                arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_use_fsync(arg1: *mut rocksdb_options_t,
                                         arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_db_log_dir(arg1: *mut rocksdb_options_t,
                                          arg2: *const libc::c_char);
}
extern "C" {
    pub fn rocksdb_options_set_wal_dir(arg1: *mut rocksdb_options_t,
                                       arg2: *const libc::c_char);
}
extern "C" {
    pub fn rocksdb_options_set_WAL_ttl_seconds(arg1: *mut rocksdb_options_t,
                                               arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_WAL_size_limit_MB(arg1: *mut rocksdb_options_t,
                                                 arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_manifest_preallocation_size(arg1:
                                                               *mut rocksdb_options_t,
                                                           arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_purge_redundant_kvs_while_flush(arg1:
                                                                   *mut rocksdb_options_t,
                                                               arg2:
                                                                   libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_allow_mmap_reads(arg1: *mut rocksdb_options_t,
                                                arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_allow_mmap_writes(arg1: *mut rocksdb_options_t,
                                                 arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_use_direct_reads(arg1: *mut rocksdb_options_t,
                                                arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_use_direct_io_for_flush_and_compaction(arg1:
                                                                          *mut rocksdb_options_t,
                                                                      arg2:
                                                                          libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_is_fd_close_on_exec(arg1:
                                                       *mut rocksdb_options_t,
                                                   arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_skip_log_error_on_recovery(arg1:
                                                              *mut rocksdb_options_t,
                                                          arg2:
                                                              libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_stats_dump_period_sec(arg1:
                                                         *mut rocksdb_options_t,
                                                     arg2: libc::c_uint);
}
extern "C" {
    pub fn rocksdb_options_set_advise_random_on_open(arg1:
                                                         *mut rocksdb_options_t,
                                                     arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_access_hint_on_compaction_start(arg1:
                                                                   *mut rocksdb_options_t,
                                                               arg2:
                                                                   libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_use_adaptive_mutex(arg1:
                                                      *mut rocksdb_options_t,
                                                  arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_bytes_per_sync(arg1: *mut rocksdb_options_t,
                                              arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_allow_concurrent_memtable_write(arg1:
                                                                   *mut rocksdb_options_t,
                                                               arg2:
                                                                   libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_enable_write_thread_adaptive_yield(arg1:
                                                                      *mut rocksdb_options_t,
                                                                  arg2:
                                                                      libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_max_sequential_skip_in_iterations(arg1:
                                                                     *mut rocksdb_options_t,
                                                                 arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_disable_auto_compactions(arg1:
                                                            *mut rocksdb_options_t,
                                                        arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_optimize_filters_for_hits(arg1:
                                                             *mut rocksdb_options_t,
                                                         arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_delete_obsolete_files_period_micros(arg1:
                                                                       *mut rocksdb_options_t,
                                                                   arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_prepare_for_bulk_load(arg1:
                                                     *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_memtable_vector_rep(arg1:
                                                       *mut rocksdb_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_memtable_prefix_bloom_size_ratio(arg1:
                                                                    *mut rocksdb_options_t,
                                                                arg2: f64);
}
extern "C" {
    pub fn rocksdb_options_set_max_compaction_bytes(arg1:
                                                        *mut rocksdb_options_t,
                                                    arg2: u64);
}
extern "C" {
    pub fn rocksdb_options_set_hash_skip_list_rep(arg1:
                                                      *mut rocksdb_options_t,
                                                  arg2: usize, arg3: i32,
                                                  arg4: i32);
}
extern "C" {
    pub fn rocksdb_options_set_hash_link_list_rep(arg1:
                                                      *mut rocksdb_options_t,
                                                  arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_plain_table_factory(arg1:
                                                       *mut rocksdb_options_t,
                                                   arg2: u32,
                                                   arg3: libc::c_int,
                                                   arg4: f64, arg5: usize);
}
extern "C" {
    pub fn rocksdb_options_set_min_level_to_compress(opt:
                                                         *mut rocksdb_options_t,
                                                     level: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_memtable_huge_page_size(arg1:
                                                           *mut rocksdb_options_t,
                                                       arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_max_successive_merges(arg1:
                                                         *mut rocksdb_options_t,
                                                     arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_bloom_locality(arg1: *mut rocksdb_options_t,
                                              arg2: u32);
}
extern "C" {
    pub fn rocksdb_options_set_inplace_update_support(arg1:
                                                          *mut rocksdb_options_t,
                                                      arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_options_set_inplace_update_num_locks(arg1:
                                                            *mut rocksdb_options_t,
                                                        arg2: usize);
}
extern "C" {
    pub fn rocksdb_options_set_report_bg_io_stats(arg1:
                                                      *mut rocksdb_options_t,
                                                  arg2: libc::c_int);
}
pub const rocksdb_tolerate_corrupted_tail_records_recovery: _bindgen_ty_2 =
    _bindgen_ty_2::rocksdb_tolerate_corrupted_tail_records_recovery;
pub const rocksdb_absolute_consistency_recovery: _bindgen_ty_2 =
    _bindgen_ty_2::rocksdb_absolute_consistency_recovery;
pub const rocksdb_point_in_time_recovery: _bindgen_ty_2 =
    _bindgen_ty_2::rocksdb_point_in_time_recovery;
pub const rocksdb_skip_any_corrupted_records_recovery: _bindgen_ty_2 =
    _bindgen_ty_2::rocksdb_skip_any_corrupted_records_recovery;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_2 {
    rocksdb_tolerate_corrupted_tail_records_recovery = 0,
    rocksdb_absolute_consistency_recovery = 1,
    rocksdb_point_in_time_recovery = 2,
    rocksdb_skip_any_corrupted_records_recovery = 3,
}
extern "C" {
    pub fn rocksdb_options_set_wal_recovery_mode(arg1: *mut rocksdb_options_t,
                                                 arg2: libc::c_int);
}
pub const rocksdb_no_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_no_compression;
pub const rocksdb_snappy_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_snappy_compression;
pub const rocksdb_zlib_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_zlib_compression;
pub const rocksdb_bz2_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_bz2_compression;
pub const rocksdb_lz4_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_lz4_compression;
pub const rocksdb_lz4hc_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_lz4hc_compression;
pub const rocksdb_xpress_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_xpress_compression;
pub const rocksdb_zstd_compression: _bindgen_ty_3 =
    _bindgen_ty_3::rocksdb_zstd_compression;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_3 {
    rocksdb_no_compression = 0,
    rocksdb_snappy_compression = 1,
    rocksdb_zlib_compression = 2,
    rocksdb_bz2_compression = 3,
    rocksdb_lz4_compression = 4,
    rocksdb_lz4hc_compression = 5,
    rocksdb_xpress_compression = 6,
    rocksdb_zstd_compression = 7,
}
extern "C" {
    pub fn rocksdb_options_set_compression(arg1: *mut rocksdb_options_t,
                                           arg2: libc::c_int);
}
pub const rocksdb_level_compaction: _bindgen_ty_4 =
    _bindgen_ty_4::rocksdb_level_compaction;
pub const rocksdb_universal_compaction: _bindgen_ty_4 =
    _bindgen_ty_4::rocksdb_universal_compaction;
pub const rocksdb_fifo_compaction: _bindgen_ty_4 =
    _bindgen_ty_4::rocksdb_fifo_compaction;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_4 {
    rocksdb_level_compaction = 0,
    rocksdb_universal_compaction = 1,
    rocksdb_fifo_compaction = 2,
}
extern "C" {
    pub fn rocksdb_options_set_compaction_style(arg1: *mut rocksdb_options_t,
                                                arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_options_set_universal_compaction_options(arg1:
                                                                *mut rocksdb_options_t,
                                                            arg2:
                                                                *mut rocksdb_universal_compaction_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_fifo_compaction_options(opt:
                                                           *mut rocksdb_options_t,
                                                       fifo:
                                                           *mut rocksdb_fifo_compaction_options_t);
}
extern "C" {
    pub fn rocksdb_options_set_ratelimiter(opt: *mut rocksdb_options_t,
                                           limiter:
                                               *mut rocksdb_ratelimiter_t);
}
extern "C" {
    pub fn rocksdb_ratelimiter_create(rate_bytes_per_sec: i64,
                                      refill_period_us: i64, fairness: i32)
     -> *mut rocksdb_ratelimiter_t;
}
extern "C" {
    pub fn rocksdb_ratelimiter_destroy(arg1: *mut rocksdb_ratelimiter_t);
}
extern "C" {
    pub fn rocksdb_compactionfilter_create(state: *mut libc::c_void,
                                           destructor:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *mut libc::c_void)>,
                                           filter:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *mut libc::c_void,
                                                                                          level:
                                                                                              libc::c_int,
                                                                                          key:
                                                                                              *const libc::c_char,
                                                                                          key_length:
                                                                                              usize,
                                                                                          existing_value:
                                                                                              *const libc::c_char,
                                                                                          value_length:
                                                                                              usize,
                                                                                          new_value:
                                                                                              *mut *mut libc::c_char,
                                                                                          new_value_length:
                                                                                              *mut usize,
                                                                                          value_changed:
                                                                                              *mut libc::c_uchar)
                                                                         ->
                                                                             libc::c_uchar>,
                                           name:
                                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                              *mut libc::c_void)
                                                                         ->
                                                                             *const libc::c_char>)
     -> *mut rocksdb_compactionfilter_t;
}
extern "C" {
    pub fn rocksdb_compactionfilter_set_ignore_snapshots(arg1:
                                                             *mut rocksdb_compactionfilter_t,
                                                         arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_compactionfilter_destroy(arg1:
                                                *mut rocksdb_compactionfilter_t);
}
extern "C" {
    pub fn rocksdb_compactionfiltercontext_is_full_compaction(context:
                                                                  *mut rocksdb_compactionfiltercontext_t)
     -> libc::c_uchar;
}
extern "C" {
    pub fn rocksdb_compactionfiltercontext_is_manual_compaction(context:
                                                                    *mut rocksdb_compactionfiltercontext_t)
     -> libc::c_uchar;
}
extern "C" {
    pub fn rocksdb_compactionfilterfactory_create(state: *mut libc::c_void,
                                                  destructor:
                                                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                     *mut libc::c_void)>,
                                                  create_compaction_filter:
                                                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                     *mut libc::c_void,
                                                                                                 context:
                                                                                                     *mut rocksdb_compactionfiltercontext_t)
                                                                                ->
                                                                                    *mut rocksdb_compactionfilter_t>,
                                                  name:
                                                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                     *mut libc::c_void)
                                                                                ->
                                                                                    *const libc::c_char>)
     -> *mut rocksdb_compactionfilterfactory_t;
}
extern "C" {
    pub fn rocksdb_compactionfilterfactory_destroy(arg1:
                                                       *mut rocksdb_compactionfilterfactory_t);
}
extern "C" {
    pub fn rocksdb_comparator_create(state: *mut libc::c_void,
                                     destructor:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut libc::c_void)>,
                                     compare:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut libc::c_void,
                                                                                    a:
                                                                                        *const libc::c_char,
                                                                                    alen:
                                                                                        usize,
                                                                                    b:
                                                                                        *const libc::c_char,
                                                                                    blen:
                                                                                        usize)
                                                                   ->
                                                                       libc::c_int>,
                                     name:
                                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                        *mut libc::c_void)
                                                                   ->
                                                                       *const libc::c_char>)
     -> *mut rocksdb_comparator_t;
}
extern "C" {
    pub fn rocksdb_comparator_destroy(arg1: *mut rocksdb_comparator_t);
}
extern "C" {
    pub fn rocksdb_filterpolicy_create(state: *mut libc::c_void,
                                       destructor:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut libc::c_void)>,
                                       create_filter:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut libc::c_void,
                                                                                      key_array:
                                                                                          *const *const libc::c_char,
                                                                                      key_length_array:
                                                                                          *const usize,
                                                                                      num_keys:
                                                                                          libc::c_int,
                                                                                      filter_length:
                                                                                          *mut usize)
                                                                     ->
                                                                         *mut libc::c_char>,
                                       key_may_match:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut libc::c_void,
                                                                                      key:
                                                                                          *const libc::c_char,
                                                                                      length:
                                                                                          usize,
                                                                                      filter:
                                                                                          *const libc::c_char,
                                                                                      filter_length:
                                                                                          usize)
                                                                     ->
                                                                         libc::c_uchar>,
                                       delete_filter:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut libc::c_void,
                                                                                      filter:
                                                                                          *const libc::c_char,
                                                                                      filter_length:
                                                                                          usize)>,
                                       name:
                                           ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                          *mut libc::c_void)
                                                                     ->
                                                                         *const libc::c_char>)
     -> *mut rocksdb_filterpolicy_t;
}
extern "C" {
    pub fn rocksdb_filterpolicy_destroy(arg1: *mut rocksdb_filterpolicy_t);
}
extern "C" {
    pub fn rocksdb_filterpolicy_create_bloom(bits_per_key: libc::c_int)
     -> *mut rocksdb_filterpolicy_t;
}
extern "C" {
    pub fn rocksdb_filterpolicy_create_bloom_full(bits_per_key: libc::c_int)
     -> *mut rocksdb_filterpolicy_t;
}
extern "C" {
    pub fn rocksdb_mergeoperator_create(state: *mut libc::c_void,
                                        destructor:
                                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut libc::c_void)>,
                                        full_merge:
                                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut libc::c_void,
                                                                                       key:
                                                                                           *const libc::c_char,
                                                                                       key_length:
                                                                                           usize,
                                                                                       existing_value:
                                                                                           *const libc::c_char,
                                                                                       existing_value_length:
                                                                                           usize,
                                                                                       operands_list:
                                                                                           *const *const libc::c_char,
                                                                                       operands_list_length:
                                                                                           *const usize,
                                                                                       num_operands:
                                                                                           libc::c_int,
                                                                                       success:
                                                                                           *mut libc::c_uchar,
                                                                                       new_value_length:
                                                                                           *mut usize)
                                                                      ->
                                                                          *mut libc::c_char>,
                                        partial_merge:
                                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut libc::c_void,
                                                                                       key:
                                                                                           *const libc::c_char,
                                                                                       key_length:
                                                                                           usize,
                                                                                       operands_list:
                                                                                           *const *const libc::c_char,
                                                                                       operands_list_length:
                                                                                           *const usize,
                                                                                       num_operands:
                                                                                           libc::c_int,
                                                                                       success:
                                                                                           *mut libc::c_uchar,
                                                                                       new_value_length:
                                                                                           *mut usize)
                                                                      ->
                                                                          *mut libc::c_char>,
                                        delete_value:
                                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut libc::c_void,
                                                                                       value:
                                                                                           *const libc::c_char,
                                                                                       value_length:
                                                                                           usize)>,
                                        name:
                                            ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           *mut libc::c_void)
                                                                      ->
                                                                          *const libc::c_char>)
     -> *mut rocksdb_mergeoperator_t;
}
extern "C" {
    pub fn rocksdb_mergeoperator_destroy(arg1: *mut rocksdb_mergeoperator_t);
}
extern "C" {
    pub fn rocksdb_readoptions_create() -> *mut rocksdb_readoptions_t;
}
extern "C" {
    pub fn rocksdb_readoptions_destroy(arg1: *mut rocksdb_readoptions_t);
}
extern "C" {
    pub fn rocksdb_readoptions_set_verify_checksums(arg1:
                                                        *mut rocksdb_readoptions_t,
                                                    arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_readoptions_set_fill_cache(arg1:
                                                  *mut rocksdb_readoptions_t,
                                              arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_readoptions_set_snapshot(arg1: *mut rocksdb_readoptions_t,
                                            arg2: *const rocksdb_snapshot_t);
}
extern "C" {
    pub fn rocksdb_readoptions_set_iterate_upper_bound(arg1:
                                                           *mut rocksdb_readoptions_t,
                                                       key:
                                                           *const libc::c_char,
                                                       keylen: usize);
}
extern "C" {
    pub fn rocksdb_readoptions_set_read_tier(arg1: *mut rocksdb_readoptions_t,
                                             arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_readoptions_set_tailing(arg1: *mut rocksdb_readoptions_t,
                                           arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_readoptions_set_readahead_size(arg1:
                                                      *mut rocksdb_readoptions_t,
                                                  arg2: usize);
}
extern "C" {
    pub fn rocksdb_readoptions_set_pin_data(arg1: *mut rocksdb_readoptions_t,
                                            arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_readoptions_set_total_order_seek(arg1:
                                                        *mut rocksdb_readoptions_t,
                                                    arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_writeoptions_create() -> *mut rocksdb_writeoptions_t;
}
extern "C" {
    pub fn rocksdb_writeoptions_destroy(arg1: *mut rocksdb_writeoptions_t);
}
extern "C" {
    pub fn rocksdb_writeoptions_set_sync(arg1: *mut rocksdb_writeoptions_t,
                                         arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_writeoptions_disable_WAL(opt: *mut rocksdb_writeoptions_t,
                                            disable: libc::c_int);
}
extern "C" {
    pub fn rocksdb_compactoptions_create() -> *mut rocksdb_compactoptions_t;
}
extern "C" {
    pub fn rocksdb_compactoptions_destroy(arg1:
                                              *mut rocksdb_compactoptions_t);
}
extern "C" {
    pub fn rocksdb_compactoptions_set_exclusive_manual_compaction(arg1:
                                                                      *mut rocksdb_compactoptions_t,
                                                                  arg2:
                                                                      libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_compactoptions_set_change_level(arg1:
                                                       *mut rocksdb_compactoptions_t,
                                                   arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_compactoptions_set_target_level(arg1:
                                                       *mut rocksdb_compactoptions_t,
                                                   arg2: libc::c_int);
}
extern "C" {
    pub fn rocksdb_flushoptions_create() -> *mut rocksdb_flushoptions_t;
}
extern "C" {
    pub fn rocksdb_flushoptions_destroy(arg1: *mut rocksdb_flushoptions_t);
}
extern "C" {
    pub fn rocksdb_flushoptions_set_wait(arg1: *mut rocksdb_flushoptions_t,
                                         arg2: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_cache_create_lru(capacity: usize) -> *mut rocksdb_cache_t;
}
extern "C" {
    pub fn rocksdb_cache_destroy(cache: *mut rocksdb_cache_t);
}
extern "C" {
    pub fn rocksdb_cache_set_capacity(cache: *mut rocksdb_cache_t,
                                      capacity: usize);
}
extern "C" {
    pub fn rocksdb_cache_get_usage(cache: *mut rocksdb_cache_t) -> usize;
}
extern "C" {
    pub fn rocksdb_cache_get_pinned_usage(cache: *mut rocksdb_cache_t)
     -> usize;
}
extern "C" {
    pub fn rocksdb_create_default_env() -> *mut rocksdb_env_t;
}
extern "C" {
    pub fn rocksdb_create_mem_env() -> *mut rocksdb_env_t;
}
extern "C" {
    pub fn rocksdb_env_set_background_threads(env: *mut rocksdb_env_t,
                                              n: libc::c_int);
}
extern "C" {
    pub fn rocksdb_env_set_high_priority_background_threads(env:
                                                                *mut rocksdb_env_t,
                                                            n: libc::c_int);
}
extern "C" {
    pub fn rocksdb_env_join_all_threads(env: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_env_destroy(arg1: *mut rocksdb_env_t);
}
extern "C" {
    pub fn rocksdb_envoptions_create() -> *mut rocksdb_envoptions_t;
}
extern "C" {
    pub fn rocksdb_envoptions_destroy(opt: *mut rocksdb_envoptions_t);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_create(env: *const rocksdb_envoptions_t,
                                        io_options: *const rocksdb_options_t)
     -> *mut rocksdb_sstfilewriter_t;
}
extern "C" {
    pub fn rocksdb_sstfilewriter_create_with_comparator(env:
                                                            *const rocksdb_envoptions_t,
                                                        io_options:
                                                            *const rocksdb_options_t,
                                                        comparator:
                                                            *const rocksdb_comparator_t)
     -> *mut rocksdb_sstfilewriter_t;
}
extern "C" {
    pub fn rocksdb_sstfilewriter_open(writer: *mut rocksdb_sstfilewriter_t,
                                      name: *const libc::c_char,
                                      errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_add(writer: *mut rocksdb_sstfilewriter_t,
                                     key: *const libc::c_char, keylen: usize,
                                     val: *const libc::c_char, vallen: usize,
                                     errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_put(writer: *mut rocksdb_sstfilewriter_t,
                                     key: *const libc::c_char, keylen: usize,
                                     val: *const libc::c_char, vallen: usize,
                                     errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_merge(writer: *mut rocksdb_sstfilewriter_t,
                                       key: *const libc::c_char,
                                       keylen: usize,
                                       val: *const libc::c_char,
                                       vallen: usize,
                                       errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_delete(writer: *mut rocksdb_sstfilewriter_t,
                                        key: *const libc::c_char,
                                        keylen: usize,
                                        errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_finish(writer: *mut rocksdb_sstfilewriter_t,
                                        errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_sstfilewriter_destroy(writer:
                                             *mut rocksdb_sstfilewriter_t);
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_create()
     -> *mut rocksdb_ingestexternalfileoptions_t;
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_move_files(opt:
                                                                *mut rocksdb_ingestexternalfileoptions_t,
                                                            move_files:
                                                                libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_snapshot_consistency(opt:
                                                                          *mut rocksdb_ingestexternalfileoptions_t,
                                                                      snapshot_consistency:
                                                                          libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_allow_global_seqno(opt:
                                                                        *mut rocksdb_ingestexternalfileoptions_t,
                                                                    allow_global_seqno:
                                                                        libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_set_allow_blocking_flush(opt:
                                                                          *mut rocksdb_ingestexternalfileoptions_t,
                                                                      allow_blocking_flush:
                                                                          libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_ingestexternalfileoptions_destroy(opt:
                                                         *mut rocksdb_ingestexternalfileoptions_t);
}
extern "C" {
    pub fn rocksdb_ingest_external_file(db: *mut rocksdb_t,
                                        file_list: *const *const libc::c_char,
                                        list_len: usize,
                                        opt:
                                            *const rocksdb_ingestexternalfileoptions_t,
                                        errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_ingest_external_file_cf(db: *mut rocksdb_t,
                                           handle:
                                               *mut rocksdb_column_family_handle_t,
                                           file_list:
                                               *const *const libc::c_char,
                                           list_len: usize,
                                           opt:
                                               *const rocksdb_ingestexternalfileoptions_t,
                                           errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_slicetransform_create(state: *mut libc::c_void,
                                         destructor:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void)>,
                                         transform:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void,
                                                                                        key:
                                                                                            *const libc::c_char,
                                                                                        length:
                                                                                            usize,
                                                                                        dst_length:
                                                                                            *mut usize)
                                                                       ->
                                                                           *mut libc::c_char>,
                                         in_domain:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void,
                                                                                        key:
                                                                                            *const libc::c_char,
                                                                                        length:
                                                                                            usize)
                                                                       ->
                                                                           libc::c_uchar>,
                                         in_range:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void,
                                                                                        key:
                                                                                            *const libc::c_char,
                                                                                        length:
                                                                                            usize)
                                                                       ->
                                                                           libc::c_uchar>,
                                         name:
                                             ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                            *mut libc::c_void)
                                                                       ->
                                                                           *const libc::c_char>)
     -> *mut rocksdb_slicetransform_t;
}
extern "C" {
    pub fn rocksdb_slicetransform_create_fixed_prefix(arg1: usize)
     -> *mut rocksdb_slicetransform_t;
}
extern "C" {
    pub fn rocksdb_slicetransform_create_noop()
     -> *mut rocksdb_slicetransform_t;
}
extern "C" {
    pub fn rocksdb_slicetransform_destroy(arg1:
                                              *mut rocksdb_slicetransform_t);
}
pub const rocksdb_similar_size_compaction_stop_style: _bindgen_ty_5 =
    _bindgen_ty_5::rocksdb_similar_size_compaction_stop_style;
pub const rocksdb_total_size_compaction_stop_style: _bindgen_ty_5 =
    _bindgen_ty_5::rocksdb_total_size_compaction_stop_style;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_5 {
    rocksdb_similar_size_compaction_stop_style = 0,
    rocksdb_total_size_compaction_stop_style = 1,
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_create()
     -> *mut rocksdb_universal_compaction_options_t;
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_size_ratio(arg1:
                                                                   *mut rocksdb_universal_compaction_options_t,
                                                               arg2:
                                                                   libc::c_int);
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_min_merge_width(arg1:
                                                                        *mut rocksdb_universal_compaction_options_t,
                                                                    arg2:
                                                                        libc::c_int);
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_max_merge_width(arg1:
                                                                        *mut rocksdb_universal_compaction_options_t,
                                                                    arg2:
                                                                        libc::c_int);
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_max_size_amplification_percent(arg1:
                                                                                       *mut rocksdb_universal_compaction_options_t,
                                                                                   arg2:
                                                                                       libc::c_int);
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_compression_size_percent(arg1:
                                                                                 *mut rocksdb_universal_compaction_options_t,
                                                                             arg2:
                                                                                 libc::c_int);
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_set_stop_style(arg1:
                                                                   *mut rocksdb_universal_compaction_options_t,
                                                               arg2:
                                                                   libc::c_int);
}
extern "C" {
    pub fn rocksdb_universal_compaction_options_destroy(arg1:
                                                            *mut rocksdb_universal_compaction_options_t);
}
extern "C" {
    pub fn rocksdb_fifo_compaction_options_create()
     -> *mut rocksdb_fifo_compaction_options_t;
}
extern "C" {
    pub fn rocksdb_fifo_compaction_options_set_max_table_files_size(fifo_opts:
                                                                        *mut rocksdb_fifo_compaction_options_t,
                                                                    size:
                                                                        u64);
}
extern "C" {
    pub fn rocksdb_fifo_compaction_options_destroy(fifo_opts:
                                                       *mut rocksdb_fifo_compaction_options_t);
}
extern "C" {
    pub fn rocksdb_livefiles_count(arg1: *const rocksdb_livefiles_t)
     -> libc::c_int;
}
extern "C" {
    pub fn rocksdb_livefiles_name(arg1: *const rocksdb_livefiles_t,
                                  index: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_livefiles_level(arg1: *const rocksdb_livefiles_t,
                                   index: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn rocksdb_livefiles_size(arg1: *const rocksdb_livefiles_t,
                                  index: libc::c_int) -> usize;
}
extern "C" {
    pub fn rocksdb_livefiles_smallestkey(arg1: *const rocksdb_livefiles_t,
                                         index: libc::c_int, size: *mut usize)
     -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_livefiles_largestkey(arg1: *const rocksdb_livefiles_t,
                                        index: libc::c_int, size: *mut usize)
     -> *const libc::c_char;
}
extern "C" {
    pub fn rocksdb_livefiles_destroy(arg1: *const rocksdb_livefiles_t);
}
extern "C" {
    pub fn rocksdb_get_options_from_string(base_options:
                                               *const rocksdb_options_t,
                                           opts_str: *const libc::c_char,
                                           new_options:
                                               *mut rocksdb_options_t,
                                           errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_delete_file_in_range(db: *mut rocksdb_t,
                                        start_key: *const libc::c_char,
                                        start_key_len: usize,
                                        limit_key: *const libc::c_char,
                                        limit_key_len: usize,
                                        errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_delete_file_in_range_cf(db: *mut rocksdb_t,
                                           column_family:
                                               *mut rocksdb_column_family_handle_t,
                                           start_key: *const libc::c_char,
                                           start_key_len: usize,
                                           limit_key: *const libc::c_char,
                                           limit_key_len: usize,
                                           errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transactiondb_open(options: *const rocksdb_options_t,
                                      txn_db_options:
                                          *const rocksdb_transactiondb_options_t,
                                      name: *const libc::c_char,
                                      errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_transactiondb_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_create_snapshot(txn_db:
                                                     *mut rocksdb_transactiondb_t)
     -> *const rocksdb_snapshot_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_release_snapshot(txn_db:
                                                      *mut rocksdb_transactiondb_t,
                                                  snapshot:
                                                      *const rocksdb_snapshot_t);
}
extern "C" {
    pub fn rocksdb_transaction_begin(txn_db: *mut rocksdb_transactiondb_t,
                                     write_options:
                                         *const rocksdb_writeoptions_t,
                                     txn_options:
                                         *const rocksdb_transaction_options_t,
                                     old_txn: *mut rocksdb_transaction_t)
     -> *mut rocksdb_transaction_t;
}
extern "C" {
    pub fn rocksdb_transaction_commit(txn: *mut rocksdb_transaction_t,
                                      errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transaction_rollback(txn: *mut rocksdb_transaction_t,
                                        errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transaction_destroy(txn: *mut rocksdb_transaction_t);
}
extern "C" {
    pub fn rocksdb_transaction_get(txn: *mut rocksdb_transaction_t,
                                   options: *const rocksdb_readoptions_t,
                                   key: *const libc::c_char, klen: usize,
                                   vlen: *mut usize,
                                   errptr: *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_transactiondb_get(txn_db: *mut rocksdb_transactiondb_t,
                                     options: *const rocksdb_readoptions_t,
                                     key: *const libc::c_char, klen: usize,
                                     vlen: *mut usize,
                                     errptr: *mut *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn rocksdb_transaction_put(txn: *mut rocksdb_transaction_t,
                                   key: *const libc::c_char, klen: usize,
                                   val: *const libc::c_char, vlen: usize,
                                   errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transactiondb_put(txn_db: *mut rocksdb_transactiondb_t,
                                     options: *const rocksdb_writeoptions_t,
                                     key: *const libc::c_char, klen: usize,
                                     val: *const libc::c_char, vlen: usize,
                                     errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transaction_delete(txn: *mut rocksdb_transaction_t,
                                      key: *const libc::c_char, klen: usize,
                                      errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transactiondb_delete(txn_db: *mut rocksdb_transactiondb_t,
                                        options:
                                            *const rocksdb_writeoptions_t,
                                        key: *const libc::c_char, klen: usize,
                                        errptr: *mut *mut libc::c_char);
}
extern "C" {
    pub fn rocksdb_transaction_create_iterator(txn:
                                                   *mut rocksdb_transaction_t,
                                               options:
                                                   *const rocksdb_readoptions_t)
     -> *mut rocksdb_iterator_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_close(txn_db: *mut rocksdb_transactiondb_t);
}
extern "C" {
    pub fn rocksdb_transactiondb_checkpoint_object_create(txn_db:
                                                              *mut rocksdb_transactiondb_t,
                                                          errptr:
                                                              *mut *mut libc::c_char)
     -> *mut rocksdb_checkpoint_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_options_create()
     -> *mut rocksdb_transactiondb_options_t;
}
extern "C" {
    pub fn rocksdb_transactiondb_options_destroy(opt:
                                                     *mut rocksdb_transactiondb_options_t);
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_max_num_locks(opt:
                                                               *mut rocksdb_transactiondb_options_t,
                                                           max_num_locks:
                                                               i64);
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_num_stripes(opt:
                                                             *mut rocksdb_transactiondb_options_t,
                                                         num_stripes: usize);
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_transaction_lock_timeout(opt:
                                                                          *mut rocksdb_transactiondb_options_t,
                                                                      txn_lock_timeout:
                                                                          i64);
}
extern "C" {
    pub fn rocksdb_transactiondb_options_set_default_lock_timeout(opt:
                                                                      *mut rocksdb_transactiondb_options_t,
                                                                  default_lock_timeout:
                                                                      i64);
}
extern "C" {
    pub fn rocksdb_transaction_options_create()
     -> *mut rocksdb_transaction_options_t;
}
extern "C" {
    pub fn rocksdb_transaction_options_destroy(opt:
                                                   *mut rocksdb_transaction_options_t);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_set_snapshot(opt:
                                                            *mut rocksdb_transaction_options_t,
                                                        v: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_deadlock_detect(opt:
                                                               *mut rocksdb_transaction_options_t,
                                                           v: libc::c_uchar);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_lock_timeout(opt:
                                                            *mut rocksdb_transaction_options_t,
                                                        lock_timeout: i64);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_expiration(opt:
                                                          *mut rocksdb_transaction_options_t,
                                                      expiration: i64);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_deadlock_detect_depth(opt:
                                                                     *mut rocksdb_transaction_options_t,
                                                                 depth: i64);
}
extern "C" {
    pub fn rocksdb_transaction_options_set_max_write_batch_size(opt:
                                                                    *mut rocksdb_transaction_options_t,
                                                                size: usize);
}
extern "C" {
    pub fn rocksdb_free(ptr: *mut libc::c_void);
}
extern "C" {
    pub fn rocksdb_get_pinned(db: *mut rocksdb_t,
                              options: *const rocksdb_readoptions_t,
                              key: *const libc::c_char, keylen: usize,
                              errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_pinnableslice_t;
}
extern "C" {
    pub fn rocksdb_get_pinned_cf(db: *mut rocksdb_t,
                                 options: *const rocksdb_readoptions_t,
                                 column_family:
                                     *mut rocksdb_column_family_handle_t,
                                 key: *const libc::c_char, keylen: usize,
                                 errptr: *mut *mut libc::c_char)
     -> *mut rocksdb_pinnableslice_t;
}
extern "C" {
    pub fn rocksdb_pinnableslice_destroy(v: *mut rocksdb_pinnableslice_t);
}
extern "C" {
    pub fn rocksdb_pinnableslice_value(t: *const rocksdb_pinnableslice_t,
                                       vlen: *mut usize)
     -> *const libc::c_char;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
